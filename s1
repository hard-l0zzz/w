создание таблиц в бд

CREATE TABLE departments(
DepartmentId INT PRIMARY KEY AUTO_INCREMENT,
Name VARCHAR(150) NOT NULL,
Description TEXT
);

CREATE TABLE positions(
PositionId INT PRIMARY KEY AUTO_INCREMENT,
Title VARCHAR(150) NOT NULL
);

CREATE TABLE employees(
EmployeeId INT PRIMARY KEY AUTO_INCREMENT,
FullName VARCHAR(100) NOT NULL,
DepartmentId INT,
PositionId INT,
FOREIGN KEY (DepartmentId) REFERENCES departments(DepartmentId) ON DELETE SET NULL,
FOREIGN KEY (PositionId) REFERENCES positions(PositionId) ON DELETE SET NULL
);

CREATE TABLE employees_contacts(
ContactId INT PRIMARY KEY AUTO_INCREMENT,
EmployeeId INT NOT NULL,
MobilePhone VARCHAR(20),
WorkPhone VARCHAR(20),
Email VARCHAR(50),
OfficeNUmber VARCHAR(10),
FOREIGN KEY (EmployeId) REFERENCES employees(EmployeeId) ON DELETE CASCADE
);

CREATE TABLE employees_personal_info(
PersonalInfoId INT PRIMARY KEY AUTO_INCREMENT,
EmployeeId INT NOT NULL,
BirthDate DATE,
AdditionalInfo TEXT,
FOREIGN KEY (EmployeId) REFERENCES employees(EmployeeId) ON DELETE CASCADE
);

CREATE TABLE events (
    EventId INT PRIMARY KEY AUTO_INCREMENT,
    EventType ENUM('Meeting', 'Conference', 'Training', 'Other') NOT NULL,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    StartDate DATETIME NOT NULL,
    EndDate DATETIME NOT NULL
);

CREATE TABLE materials (
    MaterialId INT PRIMARY KEY AUTO_INCREMENT,
    MaterialName VARCHAR(255) NOT NULL,
    MaterialDescription TEXT,
    FilePath VARCHAR(255),
    EventId INT NOT NULL,
    FOREIGN KEY (EventId) REFERENCES events(EventId) ON DELETE CASCADE
);

CREATE TABLE employees_events (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeId INT NOT NULL,
    EventId INT NOT NULL,
    FOREIGN KEY (EmployeeId) REFERENCES employees(EmployeeId) ON DELETE CASCADE,
    FOREIGN KEY (EventId) REFERENCES events(EventId) ON DELETE CASCADE
);
не забыть импортировать working calendar


ДЛЯ СОРТИРОВКИ ЭКСЕЛЬ ФАЙЛА

import pandas as pd

import re

  

df = pd.read_excel("pandas_xlsx_to_mysql\dannie.xlsx",skiprows=7)

current_department = None

new_data = []

  

for index,row in df.iterrows():

    if pd.notna(row[0]):

        if '.' in str(row[0]):

            current_department = row[0]

        else:

            if pd.notna(row[1]):

                full_name = row[1]

            else:

                full_name = None

            if full_name:

                new_data.append([full_name,cleaned_department,row[0],row[2],row[3],row[4],row[5]])

new_df = pd.DataFrame(new_data, columns=["ФИО", "Департамент", "Должность","Дата рождения","Телефон рабочий","Кабинет","Корпоративный email"])

with pd.ExcelWriter('output_file2.xlsx') as writer:

    new_df.to_excel(writer,index=False)

ДЛЯ ИМПОРТА ЭТОГО ЭКСЕЛЯ В MYSQL

import pandas as pd

from sqlalchemy import create_engine

engine = create_engine('mysql+mysqlconnector://moodleuser:moodleuserpsw@localhost/wsr2025_db')

df = pd.read_excel('output_file.xlsx')

df.to_sql('employees_data', con=engine, if_exists='replace', index=False)

ДЛЯ ВСТАВКИ ИЗ ТОЙ ТАБЛИЦЫ В ДРУГИЕ ТАБЛИЦЫ РАСПРЕДЕЛИТЬ

сначала вставить департаменты

=ЕСЛИ(ПОИСК("."; A8)>0; A8; "")

import pandas as pd
import re

data = pd.read_excel("dan2.xlsx",sheet_name = "Лист1",names=["DepartmentId","Name","ParentId","Rank"])

def find_parent(department_name,data):
    parent_prefix = str(department_name).split('.')[0]
    for index,row in data.iterrows():
        if str(row["Name"]).startswith(parent_prefix) and str(row["Name"]) != str(department_name):
            return row["DepartmentId"]
    return None

def clean_department(department_name):
    return re.sub(r'[0-9.]','',department_name).strip()

def get_rank(department_name):
    return str(department_name).count('.')

data["DepartmentName"] = data["Name"].apply(clean_department)
data["DepartmentParentId"] = data["Name"].apply(lambda x:find_parent(x,data))
data["DepartmentRank"] = data["Name"].apply(get_rank)

data = data.drop(columns=["Name","Rank","ParentId"])

data.to_excel("deps.xlsx",index=None)



-- Вставка данных в таблицу positions с игнорированием дублирующих значений
INSERT IGNORE INTO positions (Title)
SELECT DISTINCT Position FROM employees_data;

-- Вставка данных в таблицу employees
INSERT INTO employees (FullName, DepartmentId, PositionId)
SELECT 
    Name, 
    (SELECT DepartmentId FROM departments WHERE Name = Department LIMIT 1),
    (SELECT PositionId FROM positions WHERE Title = Position LIMIT 1)
FROM employees_data;

-- Вставка данных в таблицу employeepersonalinfo
INSERT INTO employees_personal_info (BirthDate, EmployeeId)
SELECT 
    STR_TO_DATE(BirthDate, '%Y-%m-%d') AS BirthDate,
    employees.EmployeeId
FROM employees_data
JOIN employees ON employees.FullName = employees_data.Name;

-- Вставка данных в таблицу employeecontacts
INSERT INTO employees_contacts (MobilePhone,WorkPhone, Email, OfficeNumber, EmployeeId)
SELECT 
    Phone, 
    Phone,
    Email, 
    Cabinet,
    employees.EmployeeId
FROM employees_data
JOIN employees  ON employees.FullName = employees_data.Name;

АПИШЕЧКА
database.py
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base,sessionmaker

DATABASE_URL = "mysql+pymysql://moodleuser:moodleuserpsw@localhost/wsr"
engine = create_engine(DATABASE_URL)

SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


from sqlalchemy.ext.automap import automap_base
from database import engine

Base = automap_base()
Base.prepare(engine,reflect=True)

Department = Base.classes.departments



АПИ:

from fastapi import FastAPI,HTTPException,Header,Depends

import datetime

import jwt

from pydantic import BaseModel

  

SECRET_KEY ="secret"

users={"admin":"password"}

  
  

app = FastAPI()

  

documents = [

{"id": 1,"title": "Документ1","date_created": "2024-05-01 14:44:44","date_updated": "2024-05-01 14:44:44","category": "Документация","has_comments": "true"},

{"id": 2,"title": "Документ2","date_created": "2024-05-01 14:44:44","date_updated": "2024-05-01 14:44:44","category": "Фэнтэзи","has_comments": "false"}

]

  
  

comments = [

    {"id": 1, "document_id": 1, "text": "Hello world", "date_created": "2024-05-01 14:44:44", "date_updated": "2024-05-01 14:44:44", "author": {"name": "Петров Петр", "position": "Администратор"}},

    {"id": 2, "document_id": 1, "text": "Another comment", "date_created": "2024-05-02 09:00:00", "date_updated": "2024-05-02 09:00:00", "author": {"name": "Иванова Ирина", "position": "Менеджер"}}

]

  

def create_token(username:str):

    payload={

        "sub":username,

        "exp":datetime.datetime.now()+datetime.timedelta(hours=1)

    }

    return jwt.encode(payload,SECRET_KEY,algorithm="HS256")

  
  

@app.post("/api/v1/SignIn")

def login(data:dict):

    username = data.get("username")

    password = data.get("password")

  

    if users.get(username)!=password:

        raise HTTPException(status_code=403,detail="Неверные данные")

  

    token = create_token(username)

    return {"access_token":token}

  
  

def verify_token(authorization:str=Header(None)):

    print(authorization)

    if not authorization:

        raise HTTPException(status_code=403,detail="Токен обязателен")

    try:

        token = authorization.split(" ")[1]

        payload = jwt.decode(token,SECRET_KEY,algorithms=["HS256"])

        return payload["sub"]

    except jwt.ExpiredSignatureError:

        raise HTTPException(status_code=403,detail="Истёк")

    except jwt.InvalidTokenError:

        raise HTTPException(status_code=403,detail="Неверный токен")

  

@app.get('/api/v1/Documents')

def read_root(user:str=Depends(verify_token)):

    return documents

  
  

@app.get("/api/v1/Document/{document_id}/Comments")

def get_comments(document_id: int, user:str = Depends(verify_token)):

    # Ищем комментарии по document_id

    doc_comments = [comment for comment in comments if comment["document_id"] == document_id]

    if not doc_comments:

        raise HTTPException(status_code=404, detail="Комментарии не найдены")

    return doc_comments

  

class CommentCreate(BaseModel):

    text: str

    author_name: str

    author_position: str

  

# 📌 Добавить комментарий к документу

@app.post("/api/v1/Document/{document_id}/Comment")

def add_comment(document_id: int, comment: CommentCreate):

    # Проверяем, существует ли документ

    document = next((doc for doc in documents if doc["id"] == document_id), None)

    if not document:

        raise HTTPException(status_code=404, detail="Документ не найден")

  

    # Создаём нового автора

    new_author = {"name": comment.author_name, "position": comment.author_position}

  

    # Создаём новый комментарий

    new_comment = {

        "id": len(comments) + 1,

        "document_id": document_id,

        "text": comment.text,

        "date_created": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),

        "date_updated": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),

        "author": new_author

    }

  

    comments.append(new_comment)

    return new_comment
